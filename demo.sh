#!/bin/bash

# Cosva IoT Smart Farm - Script de Demostraci√≥n
# Este script muestra c√≥mo usar el sistema completo

echo "üêÑ Cosva IoT Smart Farm - Demostraci√≥n"
echo "======================================"
echo ""

# Funci√≥n para mostrar el men√∫
show_menu() {
    echo "Selecciona una opci√≥n:"
    echo "1. Ver estado del sistema"
    echo "2. Iniciar simulador de sensores"
    echo "3. Ver logs del dashboard"
    echo "4. Abrir dashboard en el navegador"
    echo "5. Ver estado de contenedores"
    echo "6. Cargar datos demo"
    echo "7. Limpiar datos demo"
    echo "8. Salir"
    echo ""
}

# Funci√≥n para verificar si los servicios est√°n corriendo
check_services() {
    echo "üîç Verificando servicios..."
    if docker ps | grep -q "cosva-dashboard-service"; then
        echo "‚úÖ Dashboard service: Corriendo"
    else
        echo "‚ùå Dashboard service: No est√° corriendo"
    fi
    
    if docker ps | grep -q "cosva-postgres-dev"; then
        echo "‚úÖ PostgreSQL: Corriendo"
    else
        echo "‚ùå PostgreSQL: No est√° corriendo"
    fi
    
    if docker ps | grep -q "cosva-mosquitto-dev"; then
        echo "‚úÖ MQTT Broker: Corriendo"
    else
        echo "‚ùå MQTT Broker: No est√° corriendo"
    fi
    echo ""
}

# Funci√≥n para mostrar estado del sistema
show_system_status() {
    echo "üìä Estado del Sistema:"
    echo "====================="
    node demo/scripts/demo-status.js
    echo ""
}

# Funci√≥n para iniciar simulador
start_simulator() {
    echo "üé¨ Iniciando simulador de sensores..."
    echo "Presiona Ctrl+C para detener el simulador"
    echo ""
    node demo/scripts/simulate-sensor-data.js
}

# Funci√≥n para ver logs
show_logs() {
    echo "üìã Logs del Dashboard Service:"
    echo "=============================="
    docker logs cosva-dashboard-service --tail 20
    echo ""
}

# Funci√≥n para abrir dashboard
open_dashboard() {
    echo "üåê Abriendo dashboard..."
    if command -v open &> /dev/null; then
        open http://localhost:3000
    elif command -v xdg-open &> /dev/null; then
        xdg-open http://localhost:3000
    else
        echo "Por favor abre manualmente: http://localhost:3000"
    fi
    echo ""
}

# Funci√≥n para ver estado de contenedores
show_containers() {
    echo "üê≥ Estado de Contenedores:"
    echo "=========================="
    docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
    echo ""
}

# Funci√≥n para limpiar datos demo
clean_demo_data() {
    echo "üßπ Limpiando datos demo..."
    node demo/scripts/demoData/clear.js
    echo ""
    echo "‚úÖ Datos demo eliminados"
    echo "‚ÑπÔ∏è  NOTA: Los puestos se definen en config.yml, no se eliminan de la base de datos"
    echo ""
}

# Funci√≥n para cargar datos demo
load_demo_data() {
    echo "üìä Cargando datos demo..."
    node demo/scripts/demoData/load.js
    echo "‚úÖ Datos demo cargados"
    echo ""
}

# Bucle principal
while true; do
    show_menu
    read -p "Opci√≥n: " choice
    echo ""
    
    case $choice in
        1)
            show_system_status
            ;;
        2)
            start_simulator
            ;;
        3)
            show_logs
            ;;
        4)
            open_dashboard
            ;;
        5)
            show_containers
            ;;
        6)
            load_demo_data
            ;;
        7)
            clean_demo_data
            ;;
        8)
            echo "üëã ¬°Hasta luego!"
            exit 0
            ;;
        *)
            echo "‚ùå Opci√≥n inv√°lida. Por favor selecciona 1-8."
            echo ""
            ;;
    esac
    
    read -p "Presiona Enter para continuar..."
    echo ""
done
